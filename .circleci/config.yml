version: 2.1
orbs:
  node: circleci/node@4.1
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<pipeline.parameters.ID>> \
            --region us-east-1 \
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<<pipeline.parameters.ID>> \
            --region us-east-1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-test ]
      - run:
          name: Front-end Test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-test ]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ analyze-frontend ]
      - run:
          name: Analyze Front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [ frontend/node-modules ]
          key: analyze-frontend
  deploy:
    executor:
      name: node/default
    steps:
      - checkout
      - node/install-packages
      - run:
          command: npm run deploy
      - slack/notify:
          channel: general
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ analyze-backend ]
      - run:
          name: Analyze Back-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [ backend/node-modules ]
          key: analyze-backend

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --region us-east-1 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --region us-east-1 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws --region us-east-1 \
            ec2 describe-instances \
              --filters \
              "Name=instance-state-name,Values=running" \
              --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
              --output text >> inventory
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
  configure-infrastructure:
    docker:
      - image: ansible/ansible:ubuntu1404
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f9:ce:81:f5:7a:3d:ea:e3:72:a2:4c:8f:89:c0:c8:41"
      - run:
          name: Adding fingerprint
          command: |
            ssh -v ${USER_NAME}@${HOST_NAME}
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip ansible awscli
      - run:
          name: Configure server
          command: |
            cd .circleci.ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [ build-frontend ]
      - test-backend:
          requires: [ build-backend ]
      - scan-backend:
          requires: [ build-backend ]
      - scan-frontend:
          requires: [ build-frontend ]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
#     - deploy:
#         context: slack-secrets